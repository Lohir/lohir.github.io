<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaSE笔记_Day03：流程控制语句</title>
      <link href="/2024/04/03/java_se_study_note/day03_flowControlStatement/"/>
      <url>/2024/04/03/java_se_study_note/day03_flowControlStatement/</url>
      
        <content type="html"><![CDATA[<h2 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h2><blockquote><p>分支结构：if、switch都属于分支结构</p><p>【了解】：当分支结构中，语句体只有一行语句时，<code>&#123;&#125;</code>可以省略，如果没有<code>&#123;&#125;</code>，将紧邻分支结构的第一行语句作为语句体</p></blockquote><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式) &#123;</span><br><span class="line">    <span class="comment">// 语句体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="if…else"><a href="#if…else" class="headerlink" title="if…else"></a>if…else</h3><blockquote><p>if…else可以与三元运算符互换</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式) &#123;</span><br><span class="line">    <span class="comment">// 语句体</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 语句体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="if…else-if…else-if…else"><a href="#if…else-if…else-if…else" class="headerlink" title="if…else if…else if…else"></a>if…else if…else if…else</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式) &#123;</span><br><span class="line">    <span class="comment">// 语句体</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(表达式) &#123;</span><br><span class="line">    <span class="comment">// 语句体</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(表达式) &#123;</span><br><span class="line">    <span class="comment">// 语句体</span></span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//语句体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择语句"><a href="#选择语句" class="headerlink" title="选择语句"></a>选择语句</h2><ul><li><p>语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(变量) &#123;</span><br><span class="line">    <span class="keyword">case</span> 常量:</span><br><span class="line">        <span class="comment">// 执行业务</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 常量:</span><br><span class="line">        <span class="comment">// 执行业务</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 常量:</span><br><span class="line">        <span class="comment">// 执行业务</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">default</span> :</span><br><span class="line">        <span class="comment">// 执行业务</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意</p><blockquote><ol><li><p>switch能使用的数据类型</p><ul><li><p>byte</p></li><li><p>short</p></li><li><p>int</p></li><li><p>char</p></li><li><p>enum(枚举)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[了解]枚举类：固定的对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    RED(),YELLOW();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SwitchStatement</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(Stingp[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span>(Color.RED) &#123;</span><br><span class="line">            <span class="keyword">case</span> RED:</span><br><span class="line">                System.out.println(<span class="string">&quot;红色&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> YELLOW:</span><br><span class="line">                System.out.println(<span class="string">&quot;黄色&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>string</p></li></ul></li><li><p>常量与变量类型必须一致</p></li></ol></blockquote></li></ul><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><ul><li><p>语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(条件初始化①;条件判断②;条件更新④) &#123;</span><br><span class="line">    <span class="comment">//循环体③</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行顺序：①②③④&gt;②③④&gt;②③④…②不满足为止</p></blockquote></li><li><p>作用域<code>&#123; &#125;</code></p><blockquote><p><code>&#123;  &#125;</code>：作用域中定义的变量，作用域外不能使用</p></blockquote></li></ul><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><ul><li><p>语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 条件初始化</span></span><br><span class="line"><span class="keyword">while</span>(条件判断) &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">    <span class="comment">// 条件更新</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="do…while循环"><a href="#do…while循环" class="headerlink" title="do…while循环"></a>do…while循环</h3><ul><li><p>语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">    <span class="comment">//条件更新</span></span><br><span class="line">&#125;<span class="keyword">while</span>(条件判断);</span><br></pre></td></tr></table></figure></li></ul><h3 id="循环语句使用场景"><a href="#循环语句使用场景" class="headerlink" title="循环语句使用场景"></a>循环语句使用场景</h3><blockquote><p>for循环：循环次数已知</p><p>while循环：循环次数未知</p><p>do…while循环：至少执行一次</p></blockquote><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><ul><li><p>break</p><blockquote><p>用于选择结构，循环结构。用来结束当前循环</p></blockquote></li><li><p>continue</p><blockquote><p>只用用于循环结构。用来跳过本次循环</p></blockquote></li></ul><h3 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h3><blockquote><p>当出现循环嵌套时，我们可以一次跳出所有循环</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    tag:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>() &#123;</span><br><span class="line">        <span class="keyword">for</span>() &#123;</span><br><span class="line">            <span class="keyword">for</span>() &#123;</span><br><span class="line">                <span class="keyword">break</span> tag;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h2><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><ol><li><p>switch中能使用哪些数据类型</p><blockquote><p>byte、short、int、char、enum(枚举)、String</p></blockquote></li><li><p>case是否有顺序</p><blockquote><p>没有顺序</p></blockquote></li><li><p>讲一下case的穿透性</p><blockquote><p>如果case后面没有写break，会发生case穿透，不会判断下一个case值，将继续向下执行，直到遇到break或全部执行完毕</p></blockquote></li><li><p>switch中为什么不能使用long、float、double</p><blockquote><p>Java中规定在switch中数字类型只能是int类型，int类型以下会自动转换，而long、float、double需要强制类型转换</p></blockquote></li><li><p>for和while的区别</p><blockquote><p>for的条件变量在循环结束后就不能用了，while的则可以继续使用</p><p>如果需要继续使用就选while，不需要则选for</p><p>循环次数已知用for，未知用while</p></blockquote></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://gitee.com/lohir/lohir_blog_image/raw/master/img/image-20240403182052707.png" alt="image-20240403182052707"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE笔记_Day02：数据类型转换、运算符、方法入门</title>
      <link href="/2024/04/03/java_se_study_note/day02_dataType-operator-method/"/>
      <url>/2024/04/03/java_se_study_note/day02_dataType-operator-method/</url>
      
        <content type="html"><![CDATA[<h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><blockquote><p>Java中规定参与运算的值类型一致，如果一致将发生数据类型转换</p></blockquote><h3 id="数据类型大小"><a href="#数据类型大小" class="headerlink" title="数据类型大小"></a>数据类型大小</h3><blockquote><p>由小至大：byte、short、char、int、long、float、double</p><p>从左至右：自动类型转换</p><p>从右至左：强制类型转换</p></blockquote><h3 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">32</span> + <span class="string">&#x27;A&#x27;</span>);<span class="comment">// 97</span></span><br></pre></td></tr></table></figure><blockquote><p>将<code>&#39;A&#39;</code>转换成了int类型，值为65</p></blockquote><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><blockquote><p>语法：<code>小数据类型 变量名 = (小数据类型) 值;</code></p></blockquote><h3 id="补充：计算机中存储数据采用二进制补码"><a href="#补充：计算机中存储数据采用二进制补码" class="headerlink" title="补充：计算机中存储数据采用二进制补码"></a>补充：计算机中存储数据采用二进制补码</h3><ul><li><p>正数</p><blockquote><p>源码 &#x3D; 我们直接转换过来的二进制数</p><p><strong>三码合一</strong>：源码 &#x3D; 反码 &#x3D; 补码</p></blockquote></li><li><p>负数</p><blockquote><p>源码 &#x3D; 我们直接转换过来的二进制数</p><p>反码 &#x3D; 源码高位不变，其余取反</p><p>补码 &#x3D; 反码 + 1</p></blockquote></li><li><p><code>int -&gt; byte</code></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">十进制：686</span><br><span class="line">二进制：0010 1010 1110</span><br><span class="line">转换为byte类型：</span><br><span class="line">    补码：1010 1110</span><br><span class="line">    反码：1010 1101</span><br><span class="line">    源码：1101 0010</span><br><span class="line">    结果：-82</span><br></pre></td></tr></table></figure></li></ul><h2 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h2><table><thead><tr><th align="center">字符</th><th align="center">对应值</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">48</td></tr><tr><td align="center">9</td><td align="center">57</td></tr><tr><td align="center">A</td><td align="center">65</td></tr><tr><td align="center">Z</td><td align="center">90</td></tr><tr><td align="center">a</td><td align="center">97</td></tr><tr><td align="center">z</td><td align="center">122</td></tr></tbody></table><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><blockquote><p><strong><code>+ - * / % ++ --</code></strong></p><ol><li><p>小数运算：BigDecimal可以解决精度问题</p></li><li><p><code>++ --</code>进行赋值运算时：</p><ul><li>a &#x3D; b++;先赋值，再运算</li><li>a &#x3D; ++b;先运算，再赋值</li></ul></li></ol></blockquote><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><blockquote><p><strong><code>= += -= *= /= %=</code></strong></p><p>赋值运算的值要用变量保存</p></blockquote><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><blockquote><p><strong><code>== &gt; &lt; &gt;= &lt;= !=</code></strong></p><p>Java中使用<code>==</code>比较时，要求类型必须一致</p><p>基本数据类型用<code>==</code>比对，比对值是否相等</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;a&quot;</span> = <span class="number">97</span>);<span class="comment">// 报错，类型不一致，无法自动类型转换</span></span><br><span class="line">System.out.println(<span class="string">&#x27;a&#x27;</span> = <span class="number">97</span>);<span class="comment">// true,自动类型转换后值相同</span></span><br></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><blockquote><p><strong><code>&amp;&amp; || !</code></strong></p></blockquote><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><blockquote><p>&amp;：有0则0</p><p>|：有1则1</p><p>^（异或）：相同则0，不同则1</p><ul><li><p><code>a^b^b</code>值不变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>,b = <span class="number">5</span>;</span><br><span class="line">a ^ b ^ b == <span class="number">10</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul><p>~：按位取反</p><p><code>&lt;&lt;</code>：左移。空位补0，被移除的高位丢弃，当运算数类型是byte、short时，将自动扩大为int</p><p><code>&gt;&gt;</code>：右移。被移最高位是0，空位补0，最高位是1，空位补1</p><p><code>&gt;&gt;&gt;</code>：无符号右移。右移后空位补0</p></blockquote><h3 id="三元-目-运算符"><a href="#三元-目-运算符" class="headerlink" title="三元(目)运算符"></a>三元(目)运算符</h3><blockquote><p>语法：<code>变量 = 表达式 ? 值1 : 值2;</code></p></blockquote><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><blockquote><p>定义：对一段重复使用的逻辑进行提取，并取一个名字</p><p>注意：方法定义在类中，方法不能嵌套</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">访问权限 [状态修饰符] 返回值类型 方法名(参数列表) &#123;</span></span><br><span class="line"><span class="comment">// 编写业务逻辑</span></span><br><span class="line"><span class="comment">[return 返回值类型];</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Method</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 方法的调用</span></span><br><span class="line">        print();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;书中自有黄金屋&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h2><h3 id="笔试题"><a href="#笔试题" class="headerlink" title="笔试题"></a>笔试题</h3><ul><li><p>在不使用第三方变量的情况下，让a &#x3D; 10, b &#x3D; 3 交换变量的数据，使 a &#x3D; 3 , b &#x3D; 10</p><blockquote><ol><li><p>使用和、差运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>, b = <span class="number">3</span>;</span><br><span class="line">    a += b;<span class="comment">// a = 13</span></span><br><span class="line">    b = a - b;<span class="comment">// b = 10</span></span><br><span class="line">    a -= b; <span class="comment">// a = 3</span></span><br><span class="line">    System.out.println(<span class="string">&quot;a = &quot;</span> + a + <span class="string">&quot;,b = &quot;</span> + b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用异或</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> staic <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>,b = <span class="number">3</span>;</span><br><span class="line">    a = a ^ b;</span><br><span class="line">    b = a ^ b;</span><br><span class="line">    a = a ^ b;</span><br><span class="line">    System.out.println(<span class="string">&quot;a = &quot;</span> + a + <span class="string">&quot;,b = &quot;</span> + b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote></li><li><p>判断下列代码哪些地方会报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">byte</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">byte</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="type">byte</span> <span class="variable">b3</span> <span class="operator">=</span> <span class="number">1</span> + <span class="number">2</span>; <span class="comment">// 1</span></span><br><span class="line">    <span class="type">byte</span> <span class="variable">b4</span> <span class="operator">=</span> b1 + b2; <span class="comment">// 2</span></span><br><span class="line">    System.out.println(b3);</span><br><span class="line">    System.out.println(b4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>第一行没错，它是<code>常量 + 常量</code>，编译器处理的是<code>byte b3 = 3;</code></p><p>第二行有错，因为int类型以下的变量做运算时，会提升为int类型，编译器处理的是<code>byte b4 = (int) (b1 + b2);</code>，所以不能将大的数据类型赋值给小的数据类型</p></blockquote></li><li><p>下面代码是否有问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    s = s + <span class="number">1</span>;<span class="comment">// 1</span></span><br><span class="line">    s += <span class="number">1</span>;<span class="comment">// 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>第一行报错，<code>s = s + 1</code>进行了2次运算，因为int类型以下的变量做运算时，会提升为int类型，所以不能将大的数据类型赋值给小的数据类型</p><p>第二行没错，因为+&#x3D;是一个运算符，只运算一次，带有强制转换的特点</p></blockquote></li></ul><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><blockquote><p>&amp;&amp; 和 &amp;，|| 和 | 的区别？</p><p>&amp; 和 | 既可以作为逻辑运算符，也可以作为位运算符</p><p>&amp;&amp; 和 || 只能作为逻辑运算符，拥有短路操作 </p></blockquote><h2 id="提问"><a href="#提问" class="headerlink" title="提问"></a>提问</h2><ol><li><p>简述JDK，JRE，JVM？</p></li><li><pre><code class="java">float wb_freight = 4620.125f;double wb_freight_gas = 4620.125d;System.out.printIn((wb_freight - wb_freight_gas) == 0.0);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. ```java</span><br><span class="line">   double salary1 = 0.8;</span><br><span class="line">   double salary2 =0.7;</span><br><span class="line">   double salary3 = 0.6; </span><br><span class="line">   double result01 = salary1 - salary2;</span><br><span class="line">   double result02 = salary2 - salary3;</span><br><span class="line">   System.out.println(result01);</span><br><span class="line">   System.out.println(result02);</span><br></pre></td></tr></table></figure></code></pre></li><li><p><code>&gt;&gt;</code>和<code>&gt;&gt;&gt;</code>的区别</p></li><li><p>存在<code>i + 1 &lt; i</code>的数吗，为什么</p></li><li><p>表达式<code>(x &gt; y) ? (z &gt; w) ? x : z : w</code>，其中<code>x = 5,y = 9,z = 1,w = 9</code>，最后的结果是</p></li><li><p>如何在不新建变量的情况下交换两个变量的值</p></li><li><p>请用效率最高的计算方式计算2乘以2的64次方</p></li><li><p>用最有效的方法计算2乘以8</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://gitee.com/lohir/lohir_blog_image/raw/master/img/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E6%96%B9%E6%B3%95.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE笔记_Day01：环境搭建、代码编写、数据类型</title>
      <link href="/2024/04/03/java_se_study_note/day01_path-code-dataType/"/>
      <url>/2024/04/03/java_se_study_note/day01_path-code-dataType/</url>
      
        <content type="html"><![CDATA[<h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><ul><li><p>位权展开法</p></li><li><table><thead><tr><th>进制</th><th>展开</th><th>写法</th></tr></thead><tbody><tr><td>二进制</td><td>1010101001</td><td>10 1010 1001</td></tr><tr><td>八进制</td><td>001 010 101 001</td><td>1251</td></tr><tr><td>十进制</td><td></td><td>681</td></tr><tr><td>十六进制</td><td>0010 1010 1001</td><td>2A9</td></tr></tbody></table></li></ul><h2 id="常用DOS命令"><a href="#常用DOS命令" class="headerlink" title="常用DOS命令"></a>常用DOS命令</h2><blockquote><p>盘符切换：<code>c:</code>、<code>d:</code>、<code>e:</code></p><p>进入文件：<code>cd d:\soft</code></p><p>退回上一级文件：<code>cd ..\</code></p></blockquote><h2 id="JDK安装及环境搭建"><a href="#JDK安装及环境搭建" class="headerlink" title="JDK安装及环境搭建"></a>JDK安装及环境搭建</h2><h3 id="JVM、JRE、JDK、跨平台"><a href="#JVM、JRE、JDK、跨平台" class="headerlink" title="JVM、JRE、JDK、跨平台"></a>JVM、JRE、JDK、跨平台</h3><blockquote><p>JVM：Java虚拟机</p><p>JRE：Java程序运行时的环境，包含JVM运行时所需要的<strong>核心类库（Java程序依赖的jar文件）</strong></p><p>JDK：Java程序开发工具包，包含JRE和开发工具</p><p>跨平台：任何软件都运行在操作系统之上，Java编写的软件可以运行在任何操作系统上，这就是跨平台特性。该特性由JVM实现，我们编写的程序运行在JVM上，JVM运行在操作系统上，每个操作系统有不同版本的JVM，如图。</p></blockquote><p><img src="https://gitee.com/lohir/lohir_blog_image/raw/master/img/image-20240402195618442.png" alt="image-20240402195618442"></p><h3 id="根目录"><a href="#根目录" class="headerlink" title="根目录"></a>根目录</h3><blockquote><p>bin：命令目录</p><p>db：数据库</p><p>jre：运行环境</p><p>lib：依赖</p><p>src.zip：源代码</p></blockquote><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><blockquote><p>新建JAVA_HOME，路径：JDK根目录</p><p>配置Path，路径：<code>%JAVA_HOME%\bin</code></p></blockquote><h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 类名 &#123;</span><br><span class="line">    <span class="comment">// 主函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 代码块</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><blockquote><p>文档注释：写在类上、方法上，对类、方法进行说明，推荐使用</p><p>多行注释：写在类上、方法上，对类、方法进行说明</p><p>单行注释：写在方法内部，对某一行代码进行解释说明</p></blockquote><ul><li><p>文档注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">这是文档注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>多行注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>单行注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是单行注释</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><blockquote><p>public：公共的</p><p>class：类</p><p>static：静态的</p><p>void：无返回值</p></blockquote><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><ul><li><p>硬性要求</p><blockquote><p>标识符命名规范：</p><ol><li>可以包含<code>a-z</code>、<code>A-Z</code>、<code>0-9</code>、<code>$</code>、<code>_</code></li><li>标识符不能以数字开头</li><li>标识符不能是关键字</li></ol></blockquote></li><li><p>软性建议</p><blockquote><ol><li>类名：大驼峰</li><li>方法名：小驼峰</li></ol></blockquote></li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><blockquote><p>如果Java中的类是公共的，则要求文件名称与类名保持一致</p></blockquote><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>constant</p><blockquote><p>整数常量：59、66</p><p>小数常量：1.24、5.55</p><p>布尔常量：true、false</p><p>字符常量：’中’</p><p>字符串常量：”中国”</p><p>空常量：null</p></blockquote><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>变量（variable）</p><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><blockquote><p>整数：byte、short、int、long</p><p>小数：float、double</p><p>字符：char</p><p>布尔：boolean</p></blockquote><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><blockquote><p>字符串</p><p>数组</p><p>自定义类</p><p>集合…</p></blockquote><h2 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h2><ul><li><p>字符串是不是基本数据类型</p><blockquote><p>不是，字符串是引用数据类型</p></blockquote></li><li><p>javac和java的作用</p><blockquote><p>javac：用来编译源文件</p><p>java：用来运行编译后的字节码文件</p></blockquote></li><li><p>JDK和JRE的区别</p><blockquote><p>JDK：Java开发工具包，提供了Java开发工具和运行环境</p><p>JRE：Java运行环境，提供了Java运行所需要的环境</p><p>简单来说，JDK包含了JRE，同时还包含了很多Java程序调试和分析的工具（javac），如果需要运行Java程序，只需要JRE，如果需要编写Java程序，需要JDK</p></blockquote></li><li><p>一个Java源文件中是否可以包含多个类，有什么限制？</p><blockquote><p>可以，但是只能有一个公共类，且公共类名称与文件名必须一致</p></blockquote></li></ul><h2 id="提问"><a href="#提问" class="headerlink" title="提问"></a>提问</h2><ol><li><p>标识符的命名规范</p></li><li><p>Java中数据类型划分</p></li><li><p>字符串是否属于基本数据类型</p></li><li><p>byte取值范围</p></li><li><p>float和double的区别</p><p><img src="https://gitee.com/lohir/lohir_blog_image/raw/master/img/d1ed27497f677a7cdcf8ebf167967906.png" alt="d1ed27497f677a7cdcf8ebf167967906"></p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://gitee.com/lohir/lohir_blog_image/raw/master/img/image-20240403123409722.png" alt="image-20240403123409722"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo + Gitee + Typora搭建图床</title>
      <link href="/2024/03/27/software_configuration/picgo_gitee_typora/"/>
      <url>/2024/03/27/software_configuration/picgo_gitee_typora/</url>
      
        <content type="html"><![CDATA[<h2 id="PicGo安装"><a href="#PicGo安装" class="headerlink" title="PicGo安装"></a>PicGo安装</h2><ol><li><p>进入<a href="https://github.com/Molunerfinn/PicGo">PicGo官网</a>下载后安装</p><p><img src="https://gitee.com/lohir/lohir_blog_image/raw/master/img/20240327175807.png"></p></li><li><p>点击插件设置，输入<code>gitee</code>，安装<code>gitee-uploader 1.1.2</code></p><blockquote><p>这里需要提前安装好node.js才能安装插件</p></blockquote><p><img src="https://gitee.com/lohir/lohir_blog_image/raw/master/img/image-20240327180514184.png" alt="image-20240327180514184"></p></li></ol><h2 id="Gitee图床库建立"><a href="#Gitee图床库建立" class="headerlink" title="Gitee图床库建立"></a>Gitee图床库建立</h2><ol><li><p>gitee新建一个仓库用作图床库</p><p><img src="https://gitee.com/lohir/lohir_blog_image/raw/master/img/image-20240327201643004.png" alt="image-20240327201643004"></p></li><li><p>创建一个新的仓库用作图床库，设置为开源，并初始化仓库</p><p><img src="https://gitee.com/lohir/lohir_blog_image/raw/master/img/image-20240327201903989.png" alt="image-20240327201903989"></p></li></ol><h2 id="PicGo配置"><a href="#PicGo配置" class="headerlink" title="PicGo配置"></a>PicGo配置</h2><ol><li><p>图床设置中选择gitee，配置gitee插件</p><ul><li>图床配置名：自行填写</li><li>repo：用户名&#x2F;仓库名，可直接复制仓库的url</li><li>branch：master，分支</li><li>token：gitee的私人令牌</li><li>path：路径，一般填img</li><li>customPath、customUrl可不填</li></ul><p><img src="https://gitee.com/lohir/lohir_blog_image/raw/master/img/image-20240327181454871.png" alt="image-20240327181454871"></p></li><li><p>token获取方法</p><ol><li><p>点击设置，然后点击私人令牌</p><p><img src="https://gitee.com/lohir/lohir_blog_image/raw/master/img/image-20240327195610981.png" alt="image-20240327195610981"></p></li><li><p>生成新令牌</p><p><img src="https://gitee.com/lohir/lohir_blog_image/raw/master/img/image-20240327195647110.png" alt="image-20240327195647110"></p></li><li><p>填写令牌描述，只选择projects，点击提交</p><p><img src="https://gitee.com/lohir/lohir_blog_image/raw/master/img/image-20240327200239421.png" alt="image-20240327200239421"></p></li><li><p>私人令牌生成成功，拷贝到token</p><p><img src="https://gitee.com/lohir/lohir_blog_image/raw/master/img/image-20240327200846395.png" alt="image-20240327200846395"></p></li><li><p>将配置好的gitee插件设置为默认图床</p><p><img src="https://gitee.com/lohir/lohir_blog_image/raw/master/img/image-20240327200745119.png" alt="image-20240327200745119"></p></li></ol></li></ol><h2 id="Typora配置"><a href="#Typora配置" class="headerlink" title="Typora配置"></a>Typora配置</h2><ol><li><p>打开Typora，点击文件，选择偏好设置</p></li><li><p>点击图像，选择上传图片，勾选下列内容，上传服务选择PicGo，PicGo路径改为软件所在位置</p><p><img src="https://gitee.com/lohir/lohir_blog_image/raw/master/img/image-20240327203525920.png"></p></li></ol><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>当所有都设置好以后，编辑Markdown文档时，截图粘贴会自动将图片上传至图床库</p>]]></content>
      
      
      
        <tags>
            
            <tag> PicGo </tag>
            
            <tag> Gitee </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
